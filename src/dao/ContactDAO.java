package dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import model.Company;
import model.Contact;
import util.MySqlAdapter;



/**
 * @author	Oupouwaout
 */
public abstract class ContactDAO extends PersonDAO {
	
	
	// List
	private static ObservableList<Contact> contactListDAO = 
			FXCollections.observableArrayList();
	
	
	// Get list
	public static ObservableList<Contact> getContactListDAO() {
		return contactListDAO;
	}
	
	
	// Build list
	/**
	 * Returns a list of contacts with their attributes set.
	 * <p>
	 * This method requests a list of the contacts from the 
	 * <code>MySQL</code> database. The <code>resultSet</code> is 
	 * used to instantiate each contact from the list, set 
	 * their attributes, and add them to <code>contactListDAO</code>. 
	 * Then, this method calls <code>getPersonDAO()</code> to request 
	 * each person's details and to set them into the contacts.
	 * Finally, the built list is return.
	 * 
	 * @return the list of contacts
	 * @throws SQLException
	 */
	public static ObservableList<Contact> buildContactListDAO() throws SQLException {
		
		contactListDAO.clear();

		// Get the list of contacts with their details
		String selectSt = 
				"SELECT * "
				+ "FROM Person "
				+ "LEFT JOIN Representative USING (idPerson) "
				+ "WHERE basicSalary IS NULL;";
		ResultSet rs = MySqlAdapter.dbExecuteQuery(selectSt);
		
        while (rs.next()) {
    		// Set each contact's attributes and add them to the list
        	Contact contact = new Contact();
        	contact.setNumPerson(rs.getInt("idPerson"));
        	contactListDAO.add(contact);
        }

        // Get the person details for each contact
        for (Contact contact : contactListDAO) {
        	getPersonDAO(contact);
        }
        
		return contactListDAO;
	}
	
	
	// Insert Contact
	/**
	 * Insert a set into the database for the parametered contact 
	 * and returns the generated key.
	 * <p>
	 * This method inserts into the database a set recording the 
	 * contact's attributes, and returns the key automatically 
	 * generated by the database for this entry, if any, or -1.
	 * 
	 * @param	contact	the contact to insert
	 * @return	the generated idContact
	 * @throws	SQLException
	 */
	public static int insertContactDAO(Contact contact) throws SQLException {
		
		String insertSt = 
				"INSERT INTO Person ("
						+ "firstName, lastName, email, phoneNum, faxNum) "
				+ "VALUES ("
						+ "'" + contact.getFirstName() + "', " 
						+ "'" + contact.getLastName() + "', " 
						+ "'" + contact.getEmail() + "', " 
						+ "'" + contact.getPhoneNum() + "', " 
						+ "'" + contact.getFaxNum() + "'); ";
		
		return MySqlAdapter.dbExecuteUpdate(insertSt);
	}
	
	
	// Edit Contact
	/**
	 * Update the set in the database for the parametered company's 
	 * contact.
	 * <p>
	 * This method finds in the database the set recording the 
	 * contact's attributes using its company's idCompany, and 
	 * updates it to match the contact object's attributes.
	 * 
	 * @param company the company with contact to edit
	 * @throws SQLException
	 */
	public static void editContactDAO(Company company) throws SQLException {
		
		String updateSt = 
				"UPDATE Person "
				+ "SET "
						+ "firstName = '" + company.getContact().getFirstName() + "', "
						+ "lastName = '" + company.getContact().getLastName() + "', "
						+ "email = '" + company.getContact().getEmail() + "', "
						+ "phoneNum = '" + company.getContact().getPhoneNum() + "', "
						+ "faxNum = '" + company.getContact().getFaxNum() + "' "
				+ "WHERE idPerson = ("
					+ "SELECT idContact "
					+ "FROM Company "
					+ "WHERE idCompany = " + company.getIdCompany() + "); ";
		
		MySqlAdapter.dbExecuteUpdate(updateSt);
	}
	
	

} // public class Contact
