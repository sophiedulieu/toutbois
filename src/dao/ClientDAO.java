package dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import model.Client;
import util.MySqlAdapter;



/**
 * @author	Oupouwaout
 */
public abstract class ClientDAO extends CompanyDAO {
	
	
	// List
	public static ObservableList<Client> clientListDAO = 
			FXCollections.observableArrayList();
	
	
	// Get list
	public static ObservableList<Client> getClientListDAO() {
		return clientListDAO;
	}
	
	
	// Build list
	/**
	 * Returns a list of clients with their attributes set.
	 * <p>
	 * This method requests a list of the clients from the 
	 * <code>MySQL</code> database. The <code>resultSet</code> is 
	 * used to instantiate each client from the list, set 
	 * their attributes, and add them to <code>clientListDAO</code>. 
	 * Then, this method calls <code>getCompanyDAO()</code> to request 
	 * each company's details and to set them into the clients.
	 * Finally, the built list is return.
	 * 
	 * @return the list of clients
	 * @throws SQLException
	 */
    public static ObservableList<Client> buildClientListDAO() throws SQLException {

		// Get the list of clients with their details
		String selectSt = "SELECT * FROM Client;";
		ResultSet rs = MySqlAdapter.dbExecuteQuery(selectSt);

		// Set each client's attributes and add them to the list
        while (rs.next()) {
        	Client client = new Client();
        	client.setIdCompany(rs.getInt("idCompany"));
        	client.setNbOrder(rs.getInt("nbOrder"));
        	clientListDAO.add(client);
        }

        // Get the person details for each client
        for (Client client : clientListDAO) {
        	getCompanyDAO(client);
        }
        
		return clientListDAO;
	}
	
	
	// Insert Client
    /**
	 * Insert a set into the database for the parametered client 
	 * and returns the generated key.
	 * <p>
	 * This method inserts into the database a set recording the 
	 * client's attributes, and returns the key automatically 
	 * generated by the database for this entry, if any, or -1.
	 * 
     * @param client the client to insert
     * @return
     * @throws SQLException
     */
	public static int insertClientDAO(Client client) throws SQLException {
		
		String insertSt = 
				"INSERT INTO Client (idCompany, nbOrder) "
				+ "VALUES ("
						+ "" + client.getIdCompany() + ", " 
						+ "" + client.getNbOrder() + "); ";
		
		return MySqlAdapter.dbExecuteUpdate(insertSt);
	}
	
	
	// Edit Client
	/**
	 * Updates the set in the database for the parametered client.
	 * <p>
	 * This method finds in the database the set recording the 
	 * client's attributes using its idCompany, and updates it 
	 * to match the client object's attributes.
	 * 
	 * @param client the client to edit
	 * @throws SQLException
	 */
	public static void editClientDAO(Client client) throws SQLException {

		CompanyDAO.editCompanyDAO(client);
		
		String updateSt = 
				"UPDATE Client "
				+ "SET "
					+ "nbOrder = " + client.getNbOrder() + " "
				+ "WHERE idCompany = " + client.getIdCompany() + "; ";
		
		MySqlAdapter.dbExecuteUpdate(updateSt);
	}
	
	
	// Change Prospect to Client
	/**
	 * Inserts a set into the database for the parametered client, 
	 * and deletes the set for the company from the <code>Prospect</code> 
	 * table.
	 * <p>
	 * This method finds in the database the set recording the 
	 * company's prospect's attributes using its idCompany, and deletes it.
	 * Then, it inserts a set recording the same company as a client.
	 * 
	 * @param client the client to insert
	 * @throws SQLException
	 */
	public static void prospectToClient(Client client) throws SQLException {
		
		String deleteSt = 
				"DELETE FROM Prospect "
				+ "WHERE idCompany = " + client.getIdCompany() + ";";
		
		MySqlAdapter.dbExecuteUpdate(deleteSt);
		
		String insertSt = 
				"INSERT INTO Client (idCompany, nbOrder) "
				+ "VALUES ("
						+ "" + client.getIdCompany() + ", "
						+ "'" + client.getNbOrder() + "'); ";
		
		MySqlAdapter.dbExecuteUpdate(insertSt);
	}
	
	
	// Delete Client
	/**
	 * Deletes the set in the database for the parametered prospect.
	 * 
	 * @param prospect 
	 * @throws SQLException
	 */
	public static void deleteClient(Client client) throws SQLException {
		
		CompanyDAO.deleteCompany(client);
	}
	
	

} // public abstract class ClientDAO
