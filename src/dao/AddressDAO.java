package dao;

import java.sql.ResultSet;
import java.sql.SQLException;

import model.Address;
import model.Company;
import util.MySqlAdapter;



/**
 * @author	Oupouwaout
 */
public abstract class AddressDAO {


	// Set Address's attributes
	/**
	 * Gets the address's details from the database using 
	 * the <code>idAddress</code>, creates the address object, 
	 * sets its attributes, and returns it.
	 * 
	 * @param address the address which to set attributes
	 * @return the created address abject
	 * @throws SQLException
	 */
	public static Address getAddressDAO(int idAddress) throws SQLException {

		// Get the address's details
		String selectSt = 
				"SELECT * "
				+ "FROM Address "
				+ "INNER JOIN city USING (postalCode) "
				+ "INNER JOIN TypeStreet USING (idTypeStreet)"
				+ "WHERE idAddress = " + idAddress + ";";
		ResultSet rs = MySqlAdapter.dbExecuteQuery(selectSt);

		// Set the address's details
    	Address address = new Address();
        while (rs.next()) {
        	address.setNumAddress(rs.getString("numAddress"));
        	address.setNameStreet(rs.getString("nameStreet"));
        	address.setComplementAddress(rs.getString("complementAddress"));
        	address.setPostalCode(rs.getString("postalCode"));
        	address.setCity(rs.getString("city"));
        	address.setTypeStreet(rs.getString("nameTypeStreet"));
        }
		
        return address;
	}
	

	// Insert Address
    /**
	 * Inserts a set into the database for the address of the 
	 * parametered company, and returns the generated <code>idAddress</code>.
	 * <p>
	 * This method inserts into the database a set recording the 
	 * client's address's attributes, and returns the key automatically 
	 * generated by the database for this entry, if any, or -1.
	 * 
     * @param client the client to insert
     * @return the generated idAddress
     * @throws SQLException
     */
	public static int insertAddressDAO(Company company) throws SQLException {
		
		insertCityDAO(company.getAddress());
		
		String insertSt = 
				"INSERT INTO Address ("
					+ "numAddress, nameStreet, complementAddress, "
					+ "postalCode, idTypeStreet) "
				+ "VALUES ("
					+ "'" + company.getAddress().getNumAddress() + "', " 
					+ "'" + company.getAddress().getNameStreet() + "', " 
					+ "'" + company.getAddress().getComplementAddress() + "', " 
					+ "'" + company.getAddress().getPostalCode() + "', " 
					+ "" + (company.getAddress().getTypeStreet().ordinal() + 1) + "); ";
		
		return MySqlAdapter.dbExecuteUpdate(insertSt);
	}
	

	// Insert City
    /**
	 * Inserts a set into the database for City where the parametered 
	 * address is located.
	 * <p>
	 * This method inserts into the database a set recording the 
	 * city's attributes.
	 * 
     * @param city the city to insert
     * @throws SQLException
     */
	public static void insertCityDAO(Address address) throws SQLException {
		
		String insertSt = 
				"INSERT INTO City (postalCode, city) "
				+ "VALUES ( "
					+ "" + address.getPostalCode() + ", " 
					+ "'" + address.getCity() + "') "
				+ "ON DUPLICATE KEY UPDATE postalCode = postalCode; ";
		
		MySqlAdapter.dbExecuteUpdate(insertSt);
	}
	
	
	// Edit Address
	/**
	 * Updates a set into the database for the address of the 
	 * parametered company.
	 * <p>
	 * This method finds in the database the set recording the 
	 * company's attributes using its idCompany, and updates it 
	 * to match the company's adress object's attributes.
	 * 
	 * @param company the company to edit
	 * @throws SQLException
	 */
	public static void editAddressDAO(Company company) throws SQLException {
		
		insertCityDAO(company.getAddress());
		
		String updateSt = 
				"UPDATE Address "
				+ "SET "
					+ "numAddress = '" + company.getAddress().getNumAddress() + "', "
					+ "nameStreet = '" + company.getAddress().getNameStreet() + "', "
					+ "complementAddress = '" + company.getAddress().getComplementAddress() + "', "
					+ "postalCode = '" + company.getAddress().getPostalCode() + "', "
					+ "idTypeStreet = '" + (company.getAddress().getTypeStreet().ordinal() + 1) + "' "
				+ "WHERE idAddress = ( "
					+ "SELECT idAddress "
					+ "FROM Company "
					+ "WHERE idCompany = " + company.getIdCompany() + "); ";
		
		MySqlAdapter.dbExecuteUpdate(updateSt);
	}
	
	
	// Delete Address
	/**
	 * Deletes the set in the database for the address of the 
	 * parametered company.
	 * <p>
	 * This method actually deletes the address, and all the company's 
	 * references in all tables using the <code>ON CASCADE DELETE</code> 
	 * constraint set onto these tables.
	 * 
	 * @param company the company to delete 
	 * @throws SQLException
	 */
	public static void deleteAddress(Company company) throws SQLException {
		
		String deleteSt = 
				"DELETE FROM Address "
				+ "WHERE idAddress = ( "
					+ "SELECT idAddress "
					+ "FROM Company "
					+ "WHERE idCompany = " + company.getIdCompany() + "); ";
		
		MySqlAdapter.dbExecuteUpdate(deleteSt);
	}
	
	
	
} // public class AddressDAO
